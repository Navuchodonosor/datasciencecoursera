data <- x$get()
ln <- solve(data, ...)
ln
}
mtr
makeCacheMatrix(mtr)
m <-makeCacheMatrix(mtr)
s<-cacheSolve(m)
nm <- matrix(1:4, nrow = 2, ncol = 2)
m < - makeCacheMatrix(nm)
m <- makeCacheMatrix(nm)
s <- cacheSolve(m)
print s
print(s)
print nm
print(nm)
## Put comments here that give an overall description of what your
## functions do
## Both this functions help to make caching for inversion
## of matrices. Matrix computations (especially in big matrices) are highly
## intensive. But if we use in coding one matrix for several times
## (in loops), we could compute it one time and than use as
## often, as we needed. This way is more efficient.
##
## To facilitate this caching we create a special function.
## You create a matrix in common way,
## for example:
## mtr<- matrix(1:6, ncol = 3, nrow = 3)
## cache<- makeCacheMatrix(mtr)
## Initially function is NULL.
makeCacheMatrix <- function( x = matrix()) {
ln  <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed <- function(inverse) ln <<- inverse
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
## Here a reversed matrix is returned
cacheSolve <- function(x, ...) {
## Looking for a current state of the inverse
## Is it was computed already.
ln <- x$getinversed()
## If YES...
if (!is.null(ln)) {
message("getting cached matrix...")
return(ln)
}
## If NO, get the matrix itself
data <- x$get()
## This is an inverse
ln <- solve(data, ...)
x$setinverse(ln)
ln
}
nm2 <- matrix(1:4, nrow = 2, ncol = 2)
m <- makeCacheMatrix(nm2)
s <- cacheSolve(m)
m
s <- cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
# Get the inverse
getinverse <- function() inv
# Encapsulate into a list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
# Simply return the computed inverse
message("Getting cached matrix")
return(inv)
}
# If it hasn't...
# Get the matrix itself
data <- x$get()
# Find the inverse
inv <- solve(data, ...)
# Cache this result in the object
x$setinverse(inv)
# Return this new result
inv
}
x <- matrix(1:4, nrow=2, ncol=2)
m <- makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
# Get the inverse
getinverse <- function() inv
# Encapsulate into a list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
# Simply return the computed inverse
message("Getting cached matrix")
return(inv)
}
# If it hasn't...
# Get the matrix itself
data <- x$get()
# Find the inverse
inv <- solve(data, ...)
# Cache this result in the object
x$setinverse(inv)
# Return this new result
inv
}
m <- makeCacheMatrix(x)
s <- cacheSolve(m)
print(s)
s2 <- cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## Both this functions help to make caching for inversion
## of matrices. Matrix computations (especially in big matrices) are highly
## intensive. But if we use in coding one matrix for several times
## (in loops), we could compute it one time and than use as
## often, as we needed. This way is more efficient.
##
## To facilitate this caching we create a special function.
## You create a matrix in common way,
## for example:
## mtr<- matrix(1:6, ncol = 3, nrow = 3)
## cache<- makeCacheMatrix(mtr)
## Initially function is NULL.
makeCacheMatrix <- function( x = matrix()) {
ln  <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed <- function(inverse) ln <<- inverse
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
## Here a reversed matrix is returned
cacheSolve <- function(x, ...) {
## Looking for a current state of the inverse
## Is it was computed already.
ln <- x$getinversed()
## If YES...
if (!is.null(ln)) {
message("getting cached matrix...")
return(ln)
}
## If NO, get the matrix itself
data <- x$get()
## This is an inverse
ln <- solve(data, ...)
x$setinverse(ln)
ln
}
x <- matrix(1:4, nrow=2, ncol=2)
m <- makeCacheMatrix(x)
s <- cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## Both this functions help to make caching for inversion
## of matrices. Matrix computations (especially in big matrices) are highly
## intensive. But if we use in coding one matrix for several times
## (in loops), we could compute it one time and than use as
## often, as we needed. This way is more efficient.
##
## To facilitate this caching we create a special function.
## You create a matrix in common way,
## for example:
## mtr<- matrix(1:6, ncol = 3, nrow = 3)
## cache<- makeCacheMatrix(mtr)
## Initially function is NULL.
makeCacheMatrix <- function( x = matrix()) {
ln  <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed <- function(inverse) ln <<- inverse
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
## Here a reversed matrix is returned
cacheSolve <- function(x, ...) {
## Looking for a current state of the inverse
## Is it was computed already.
ln <- x$getinversed()
## If YES...
if (!is.null(ln)) {
message("getting cached matrix...")
return(ln)
}
## If NO, get the matrix itself
data <- x$get()
## This is an inverse
ln <- solve(data, ...)
x$inversed(ln)
ln
}
nm <- matrix(1:4, nrow = 2, ncol = 2)
m <- makeCacheMatrix(nm)
s <- cacheSolve(m)
print (s)
s2 <- cacheSolve(m)
## This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
#put values to my local matrix
set <- function(y){
x <<- y
i <<- NULL
}
get <- function(){
x
}
#calculates the inverse
setInverse <- function(inverse){
i <<- inverse
}
getInverse <- function(){
i
}
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## This function computes the inverse of the special "matrix" returned by
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getInverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
matrixTemp <- x$get()
inverse <- solve(matrixTemp)
x$setInverse(inverse)
inverse
}
s<- makeCacheMatrix(nm)
m<- cacheSolve(s)
m
s2<-cacheSolve(s)
s2
?subsetx
??subsetx
outcome<-read.csv("outcome-of-care-measures.csv", header =TRUE, stringsAsFactors=F, na.strings="Not Available")
getwd
getwd()
setwd("C:/Users/user/Documents/GitHub/datasciencecoursera/Assignment_3")
outcome<-read.csv("outcome-of-care-measures.csv", header =TRUE, stringsAsFactors=F, na.strings="Not Available")
?subset
LowestRate<-min(outcome[,11], na.rm = TRUE)
subsetLowest <- subset(outcome, outcome[,11] %in% LowestRate)
head(subsetLowest)
subsetLowest[2]
best <- function (state, outcome) {
## Read outcome data
outcomes<-read.csv("outcome-of-care-measures.csv", header =TRUE, stringsAsFactors=F, na.strings="Not Available")
##Check that state and outcome are valid
diagnosis<-c("heart attack", "heart failure", "pneumonia")
if(!any(outcome == diagnosis)) {stop("invalid outcome")}
if(!any(state == state.abb)) {stop("invalid state")}
##Return hospital name in that state with 30-day
##lowest death rate
if(outcome == "heart attack") {
LowestRate<-min(outcomes[,11], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,11] %in% LowestRate)
subsetLowest[2]
}
else if (outcome == "heart failure") {
LowestRate<-min(outcomes[,17], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,17] %in% LowestRate)
subsetLowest[2]
}
else {
LowestRate<-min(outcomes[,23], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,23] %in% LowestRate)
subsetLowest[2]
}
}
best <- function (state, outcome) {
## Read outcome data
outcomes<-read.csv("outcome-of-care-measures.csv", header =TRUE, stringsAsFactors=F, na.strings="Not Available")
##Check that state and outcome are valid
diagnosis<-c("heart attack", "heart failure", "pneumonia")
if(!any(outcome == diagnosis)) {stop("invalid outcome")}
if(!any(state == state.abb)) {stop("invalid state")}
##Return hospital name in that state with 30-day
##lowest death rate
if(outcome == "heart attack") {
LowestRate<-min(outcomes[,11], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,11] %in% LowestRate)
subsetLowest[2]
}
else if (outcome == "heart failure") {
LowestRate<-min(outcomes[,17], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,17] %in% LowestRate)
subsetLowest[2]
}
else {
LowestRate<-min(outcomes[,23], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,23] %in% LowestRate)
subsetLowest[2]
}
}
best("TX","heart attack")
best("MD","heart attack")
best <- function (state, outcome) {
## Read outcome data
outcomes<-read.csv("outcome-of-care-measures.csv", header =TRUE, stringsAsFactors=F, na.strings="Not Available")
##Check that state and outcome are valid
diagnosis<-c("heart attack", "heart failure", "pneumonia")
if(!any(outcome == diagnosis)) {stop("invalid outcome")}
if(!any(state == state.abb)) {stop("invalid state")}
##Return hospital name in that state with 30-day
##lowest death rate
if(outcome == "heart attack") {
LowestRate<-min(outcomes[,11], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,11] %in% LowestRate)
place<-subsetLowest[2]
}
else if (outcome == "heart failure") {
LowestRate<-min(outcomes[,17], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,17] %in% LowestRate)
place<-subsetLowest[2]
}
else {
LowestRate<-min(outcomes[,23], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,23] %in% LowestRate)
place<-subsetLowest[2]
}
finalPlace<-place[with(answer, order(Hospital.Name)), ]
finalPlace[1]
}
best("TX","heart attack")
best <- function (state, outcome) {
## Read outcome data
outcomes<-read.csv("outcome-of-care-measures.csv", header =TRUE, stringsAsFactors=F, na.strings="Not Available")
##Check that state and outcome are valid
diagnosis<-c("heart attack", "heart failure", "pneumonia")
if(!any(outcome == diagnosis)) {stop("invalid outcome")}
if(!any(state == state.abb)) {stop("invalid state")}
##Return hospital name in that state with 30-day
##lowest death rate
if(outcome == "heart attack") {
LowestRate<-min(outcomes[,11], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,11] %in% LowestRate)
place<-subsetLowest[2]
}
else if (outcome == "heart failure") {
LowestRate<-min(outcomes[,17], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,17] %in% LowestRate)
place<-subsetLowest[2]
}
else {
LowestRate<-min(outcomes[,23], na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,23] %in% LowestRate)
place<-subsetLowest[2]
}
finalPlace<-place[with(place, order(Hospital.Name)), ]
finalPlace[1]
}
best("TX","heart attack")
best("MD","heart attack")
best("BB","heart attack")
best("TX","hert attack")
best("TX","heart failure")
outcomes<-read.csv("outcome-of-care-measures.csv", header =TRUE, stringsAsFactors=F, na.strings="Not Available")
best <- function (state, outcome) {
## Read outcome data
outcomes<-read.csv("outcome-of-care-measures.csv", header =TRUE, stringsAsFactors=F, na.strings="Not Available")
##Check that state and outcome are valid
diagnosis<-c("heart attack", "heart failure", "pneumonia")
if(!any(outcome == diagnosis)) {stop("invalid outcome")}
if(!any(state == state.abb)) {stop("invalid state")}
##Return hospital name in that state with 30-day
##lowest death rate
if(outcome == "heart attack") {
LowestRate<-min(outcomes$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,11] %in% LowestRate)
place<-subsetLowest[2]
}
else if (outcome == "heart failure") {
LowestRate<-min(outcomes$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,17] %in% LowestRate)
place<-subsetLowest[2]
}
else {
LowestRate<-min(outcomes$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
, na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,23] %in% LowestRate)
place<-subsetLowest[2]
}
finalPlace<-place[with(place, order(Hospital.Name)), ]
finalPlace[1]
}
best("TX","heart failure")
best("TX","pneumonia")
best("CA","pneumonia")
best <- function (state, outcome) {
## Read outcome data
outcomes<-read.csv("outcome-of-care-measures.csv", header =TRUE, stringsAsFactors=F, na.strings="Not Available")
##Check that state and outcome are valid
diagnosis<-c("heart attack", "heart failure", "pneumonia")
if(!any(outcome == diagnosis)) {stop("invalid outcome")}
if(!any(state == state.abb)) {stop("invalid state")}
##Return hospital name in that state with 30-day
##lowest death rate
if(outcome == "heart attack") {
mortalityRate<- outcomes$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
LowestRate<-min(mortalityRate, na.rm = TRUE)
subsetLowest <- subset(outcomes, mortalityRate %in% LowestRate)
place<-subsetLowest[2]
place
}
else if (outcome == "heart failure") {
LowestRate<-min(outcomes$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,17] %in% LowestRate)
place<-subsetLowest[2]
place
}
else {
LowestRate<-min(outcomes$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
, na.rm = TRUE)
subsetLowest <- subset(outcomes, outcomes[,23] %in% LowestRate)
place<-subsetLowest[2]
place
}
finalPlace<-place[with(place, order(Hospital.Name)), ]
finalPlace[1]
}
best("CA","pneumonia")
best("TX", "heart attack")
best <- function (state, outcome) {
## Read outcome data
outcomes<-read.csv("outcome-of-care-measures.csv", header =TRUE, stringsAsFactors=F, na.strings="Not Available")
##Check that state and outcome are valid
diagnosis<-c("heart attack", "heart failure", "pneumonia")
if(!any(outcome == diagnosis)) {stop("invalid outcome")}
if(!any(state == state.abb)) {stop("invalid state")}
##Return hospital name in that state with 30-day
##lowest death rate
subsettedStates <- subset(outcomes, outcomes$State == state)
if(outcome == "heart attack") {
mortalityRate<- subsettedStates$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
LowestRate<-min(mortalityRate, na.rm = TRUE)
subsetLowest <- subset(subsettedStates, mortalityRate %in% LowestRate)
place<-subsetLowest[2]
place
}
else if (outcome == "heart failure") {
LowestRate<-min(subsettedStates$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, na.rm = TRUE)
subsetLowest <- subset(subsettedStates, subsettedStates[,17] %in% LowestRate)
place<-subsetLowest[2]
place
}
else {
LowestRate<-min(subsettedStates$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
, na.rm = TRUE)
subsetLowest <- subset(subsettedStates, subsettedStates[,23] %in% LowestRate)
place<-subsetLowest[2]
place
}
finalPlace<-place[with(place, order(Hospital.Name)), ]
finalPlace[1]
}
best("TX", "heart attack")
best("TX", "heart failure")
best("TX", "heart failure")
best("BB", "heart attack")
best("NY", "heart attack")
best("NY", "hert attack")
x<-subset(outcomes, outcomes$State == state)
x<-subset(outcomes, outcomes$State == "TX")
str(x)
head(x)
?subset
mortalityRate<- x$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
LowestRate<-min(mortalityRate, na.rm = TRUE)
subsetLowest <- subset(subsettedStates, mortalityRate %in% LowestRate)
subsetLowest <- subset(x, mortalityRate %in% LowestRate)
head(subsetLowest)
place<-subsetLowest[2]
place
finalPlace<-place[with(place, order(Hospital.Name)), ]
finalPlace
