?do.call
library(datasets)
data(mtcars)
head(mtcars)
cars_cyl<-split(mtcars, mtcars$cyl)
six_cyl<-cars_cyl$`6`
eight_cyl<-cars_cyl$`8`
head(six_cyl)
diff<-mean(six_cyl$hp)-mean(eight_cyl$hp)
abs(diff)
four_cyl<-cars_cyl$`4`
diff2<-mean(four_cyl$hp)-mean(eight_cyl$hp)
abs(diff2)
diff3<-mean(eight_cyl$hp)-mean(four_cyl$hp)
abs(diff3)
?'<<'
'??<<'
??<<
?'>>'
?>>
?<<
makeVector<- function (x = numeric ()) {
m <- NULL
set<- function {
x <<- y
m <<- NULL
}
get<- function () x
setmean <- function (mean) m<<- mean
getmean <- function () m
list( set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function (x, ...) {
m <- x$getmean()
if (!is.null(m)) {
message("getting cahed data")
return (m)
}
data <- x$get()
m <- mean (data, ...)
x$setmean (m)
m
}
mtr<- matrix(1:6, nrow = 2, ncol = 3)
mtr
solve(mtr)
?solve
mtr<-matrix(c(2,6-3,-9), nrow =2, ncol = 2)
mtr<-matrix(c(2,6,-3,-9), nrow =2, ncol = 2)
mtr
solve(mtr, c(4,12))
mtr<-matrix(c(1,3,3,4), nrow = 2, ncol = 2)
mtr
rs<-c(-2,-1)
solve(mtr,rs)
mtr<-matrix(c(6,3,4,3,1,2,5,2,3), nrow = 3, ncol = 3)
mtr
rs<-matrix(c(2500,1000,1600))
solve(mtr,rs)
makeVector(2:15)
makeVector<- function (x = numeric ()) {
m <- NULL
set<- function {
x <<- y
m <<- NULL
}
get<- function () x
setmean <- function (mean) m<<- mean
getmean <- function () m
list( set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector<- function (x = numeric ()) {
m <- NULL
set<- function {
x <<- y
m <<- NULL
}
get<- function () x
setmean <- function (mean) m<<- mean
getmean <- function () m
list( set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(20)
x
m
ls(nvironment:x)
ls(nvironment:m)
cl()
makeCacheMatrix <- function( x = matrix()) {
ln = <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed< - function(inversed) ln <<- inversed
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
makeCacheMatrix <- function( x = matrix()) {
ln  <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed< - function(inversed) ln <<- inversed
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
makeCacheMatrix(1:4, ncol = 2, nrow = 2)
x <- matrix(1:20, ncol = 5, nrow = 5)
makeCacheMatrix(x)
makeCacheMatrix <- function( x = matrix()) {
ln  <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed< - function(inverse) ln <<- inverse
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
makeCacheMatrix(x)
makeCacheMatrix <- function( x = matrix()) {
ln  <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed <- function(inverse) ln <<- inverse
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
makeCacheMatrix(x)
ls(environment: 0x0000000005fd0710)
ls("environment: 0x0000000005fd0710")
ls(environment(inversed))
ls(environment(0x0000000005fd0710))
cac<-ls(makeCacheMatrix(x))
ls(environment(cac))
mtr<- matrix(1:6, ncol = 3, nrow = 3)
mtr
makeCacheMatrix(mtr)
ls(mtr)
ls(environment(mtr))
View(makeVector)
View(mtr)
cache<- makeCacheMatrix(mtr)
ls(environment(cache))
ls(cache)
cache
mtr
f<-cacheSolve(mtr)
## Put comments here that give an overall description of what your
## functions do
## Both this functions help to make caching for inversion
## of matrices. Matrix computations (especially in big matrices) are highly
## intensive. But if we use in coding one matrix for several times
## (in loops), we could compute it one time and than use as
## often, as we needed. This way is more efficient.
##
## To facilitate this caching we create a special function.
## You create a matrix in common way,
## for example:
## mtr<- matrix(1:6, ncol = 3, nrow = 3)
## cache<- makeCacheMatrix(mtr)
## Initially function is NULL.
makeCacheMatrix <- function( x = matrix()) {
ln  <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed <- function(inverse) ln <<- inverse
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
ln <- x$getinversed()
if (!is.null(ln)) {
message("Getting cached matrix...")
return(ln)
}
data <- x$get()
ln <- solve(data, ...)
ln
}
f <- cacheSolve(mtr)
mtr
makeCacheMatrix <- function( x = matrix()) {
ln  <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed <- function(inverse) ln <<- inverse
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
ln <- x$getinversed()
if (!is.null(ln)) {
message("getting cached matrix...")
return(ln)
}
data <- x$get()
ln <- solve(data, ...)
ln
}
mtr
makeCacheMatrix(mtr)
m <-makeCacheMatrix(mtr)
s<-cacheSolve(m)
nm <- matrix(1:4, nrow = 2, ncol = 2)
m < - makeCacheMatrix(nm)
m <- makeCacheMatrix(nm)
s <- cacheSolve(m)
print s
print(s)
print nm
print(nm)
## Put comments here that give an overall description of what your
## functions do
## Both this functions help to make caching for inversion
## of matrices. Matrix computations (especially in big matrices) are highly
## intensive. But if we use in coding one matrix for several times
## (in loops), we could compute it one time and than use as
## often, as we needed. This way is more efficient.
##
## To facilitate this caching we create a special function.
## You create a matrix in common way,
## for example:
## mtr<- matrix(1:6, ncol = 3, nrow = 3)
## cache<- makeCacheMatrix(mtr)
## Initially function is NULL.
makeCacheMatrix <- function( x = matrix()) {
ln  <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed <- function(inverse) ln <<- inverse
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
## Here a reversed matrix is returned
cacheSolve <- function(x, ...) {
## Looking for a current state of the inverse
## Is it was computed already.
ln <- x$getinversed()
## If YES...
if (!is.null(ln)) {
message("getting cached matrix...")
return(ln)
}
## If NO, get the matrix itself
data <- x$get()
## This is an inverse
ln <- solve(data, ...)
x$setinverse(ln)
ln
}
nm2 <- matrix(1:4, nrow = 2, ncol = 2)
m <- makeCacheMatrix(nm2)
s <- cacheSolve(m)
m
s <- cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
# Get the inverse
getinverse <- function() inv
# Encapsulate into a list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
# Simply return the computed inverse
message("Getting cached matrix")
return(inv)
}
# If it hasn't...
# Get the matrix itself
data <- x$get()
# Find the inverse
inv <- solve(data, ...)
# Cache this result in the object
x$setinverse(inv)
# Return this new result
inv
}
x <- matrix(1:4, nrow=2, ncol=2)
m <- makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
# Get the inverse
getinverse <- function() inv
# Encapsulate into a list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
# Simply return the computed inverse
message("Getting cached matrix")
return(inv)
}
# If it hasn't...
# Get the matrix itself
data <- x$get()
# Find the inverse
inv <- solve(data, ...)
# Cache this result in the object
x$setinverse(inv)
# Return this new result
inv
}
m <- makeCacheMatrix(x)
s <- cacheSolve(m)
print(s)
s2 <- cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## Both this functions help to make caching for inversion
## of matrices. Matrix computations (especially in big matrices) are highly
## intensive. But if we use in coding one matrix for several times
## (in loops), we could compute it one time and than use as
## often, as we needed. This way is more efficient.
##
## To facilitate this caching we create a special function.
## You create a matrix in common way,
## for example:
## mtr<- matrix(1:6, ncol = 3, nrow = 3)
## cache<- makeCacheMatrix(mtr)
## Initially function is NULL.
makeCacheMatrix <- function( x = matrix()) {
ln  <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed <- function(inverse) ln <<- inverse
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
## Here a reversed matrix is returned
cacheSolve <- function(x, ...) {
## Looking for a current state of the inverse
## Is it was computed already.
ln <- x$getinversed()
## If YES...
if (!is.null(ln)) {
message("getting cached matrix...")
return(ln)
}
## If NO, get the matrix itself
data <- x$get()
## This is an inverse
ln <- solve(data, ...)
x$setinverse(ln)
ln
}
x <- matrix(1:4, nrow=2, ncol=2)
m <- makeCacheMatrix(x)
s <- cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## Both this functions help to make caching for inversion
## of matrices. Matrix computations (especially in big matrices) are highly
## intensive. But if we use in coding one matrix for several times
## (in loops), we could compute it one time and than use as
## often, as we needed. This way is more efficient.
##
## To facilitate this caching we create a special function.
## You create a matrix in common way,
## for example:
## mtr<- matrix(1:6, ncol = 3, nrow = 3)
## cache<- makeCacheMatrix(mtr)
## Initially function is NULL.
makeCacheMatrix <- function( x = matrix()) {
ln  <- NULL
set <- function (z) {
x <<- z
ln <<- NULL
}
get <- function() x
inversed <- function(inverse) ln <<- inverse
getinversed<- function() ln
list(set = set, get = get,
inversed = inversed,
getinversed = getinversed)
}
## Here a reversed matrix is returned
cacheSolve <- function(x, ...) {
## Looking for a current state of the inverse
## Is it was computed already.
ln <- x$getinversed()
## If YES...
if (!is.null(ln)) {
message("getting cached matrix...")
return(ln)
}
## If NO, get the matrix itself
data <- x$get()
## This is an inverse
ln <- solve(data, ...)
x$inversed(ln)
ln
}
nm <- matrix(1:4, nrow = 2, ncol = 2)
m <- makeCacheMatrix(nm)
s <- cacheSolve(m)
print (s)
s2 <- cacheSolve(m)
## This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
#put values to my local matrix
set <- function(y){
x <<- y
i <<- NULL
}
get <- function(){
x
}
#calculates the inverse
setInverse <- function(inverse){
i <<- inverse
}
getInverse <- function(){
i
}
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## This function computes the inverse of the special "matrix" returned by
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getInverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
matrixTemp <- x$get()
inverse <- solve(matrixTemp)
x$setInverse(inverse)
inverse
}
s<- makeCacheMatrix(nm)
m<- cacheSolve(s)
m
s2<-cacheSolve(s)
s2
